{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91908\\\\Dropbox\\\\My PC (LAPTOP-N7GNE1OQ)\\\\Downloads\\\\Spotify-Clone-master\\\\spotify-clone\\\\src\\\\components\\\\Artist\\\\Artist.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useStateValue } from '../../StateProvider';\nimport './Artist.css';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport SongRow from '../SongRow/SongRow';\nexport default function Artist({\n  spotify\n}) {\n  const [{\n    artistId,\n    playing\n  }, dispatch] = useStateValue();\n  const [artist, setArtist] = useState(null);\n  const [albums, setAlbums] = useState([]);\n  const [topTracks, setTopTracks] = useState([]);\n  const [select, setSelect] = useState(null);\n  const [albumHover, setAlbumHover] = useState(null);\n  useEffect(() => {\n    spotify.getArtist(artistId).then(res => setArtist(res)).catch(err => console.log(err));\n    spotify.getArtistAlbums(artistId).then(res => setAlbums(res.items)).catch(err => console.log(err));\n    spotify.getArtistTopTracks(artistId, \"US\").then(res => {\n      setTopTracks(res.tracks); // convert playlist.tracks to playlist.tracks.items.track\n      // because that's how we extract each track in the footer player\n\n      let playlist = res;\n      let items = res.tracks;\n      items = items.map(item => ({\n        'track': item\n      }));\n      playlist.tracks = {};\n      playlist.tracks.items = items;\n      dispatch({\n        type: 'SET_PLAYLIST',\n        playlist: playlist\n      });\n      dispatch({\n        type: 'SET_INDEX',\n        index: 0\n      });\n    }).catch(err => console.log(err));\n  }, []); // for visual select purpose only\n\n  const handleSelect = id => {\n    if (select) setSelect(null);else setSelect(id);\n  };\n\n  const playSong = (trackId, index) => {\n    dispatch({\n      type: 'SET_ITEM',\n      item: topTracks[index]\n    });\n    dispatch({\n      type: 'SET_INDEX',\n      index: index\n    });\n    dispatch({\n      type: 'SET_PLAYING',\n      playing: trackId\n    });\n    dispatch({\n      type: 'SET_PAUSE',\n      paused: false\n    });\n  };\n\n  const getAlbumTracks = (albumId, imageURL) => {\n    spotify.getAlbumTracks(albumId).then(res => {\n      // format the playlist in the way we will extract the data later\n      let items = res.items;\n      items = items.map(item => ({\n        'track': item\n      }));\n      let playlist = {\n        tracks: {}\n      };\n      playlist.tracks.items = items;\n      playlist.images = [{\n        url: imageURL\n      }];\n      dispatch({\n        type: 'SET_PLAYLIST',\n        playlist: playlist\n      });\n      dispatch({\n        type: 'SET_INDEX',\n        index: 0\n      });\n      dispatch({\n        type: 'SET_TAB',\n        tab: null\n      });\n    }).catch(err => console.log(err));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: artist === null || artist === void 0 ? void 0 : artist.images[0].url,\n    alt: artist === null || artist === void 0 ? void 0 : artist.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, artist === null || artist === void 0 ? void 0 : artist.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, `Genres: `, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 26\n    }\n  }, artist === null || artist === void 0 ? void 0 : artist.genres.join(', '))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, `Popularity: `, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 30\n    }\n  }, artist === null || artist === void 0 ? void 0 : artist.popularity)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, `Followers: `, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }\n  }, artist === null || artist === void 0 ? void 0 : artist.followers.total.toLocaleString())), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"Follow\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__topTracks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Popular\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__popular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, topTracks.map((track, i) => /*#__PURE__*/React.createElement(SongRow, {\n    key: i,\n    track: track,\n    num: i + 1,\n    play: playSong,\n    playingId: playing,\n    onSelect: () => handleSelect(track.id),\n    select: select,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Albums\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__albums\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, albums.map((album, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"artist__album\",\n    key: i,\n    onClick: () => getAlbumTracks(album.id, album.images[0].url),\n    onMouseEnter: () => setAlbumHover(album.id),\n    onMouseLeave: () => setAlbumHover(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, albumHover === album.id && /*#__PURE__*/React.createElement(PlayArrowIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 46\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: album.images[0].url,\n    alt: album.name,\n    style: {\n      width: '160px',\n      height: '160px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, album.name))))));\n}","map":{"version":3,"sources":["C:/Users/91908/Dropbox/My PC (LAPTOP-N7GNE1OQ)/Downloads/Spotify-Clone-master/spotify-clone/src/components/Artist/Artist.js"],"names":["React","useEffect","useState","useStateValue","PlayArrowIcon","SongRow","Artist","spotify","artistId","playing","dispatch","artist","setArtist","albums","setAlbums","topTracks","setTopTracks","select","setSelect","albumHover","setAlbumHover","getArtist","then","res","catch","err","console","log","getArtistAlbums","items","getArtistTopTracks","tracks","playlist","map","item","type","index","handleSelect","id","playSong","trackId","paused","getAlbumTracks","albumId","imageURL","images","url","tab","name","genres","join","popularity","followers","total","toLocaleString","track","i","album","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useStateValue } from '../../StateProvider';\nimport './Artist.css';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport SongRow from '../SongRow/SongRow';\n\nexport default function Artist({ spotify }) {\n  const [{ artistId, playing }, dispatch] = useStateValue();\n  const [artist, setArtist] = useState(null);\n  const [albums, setAlbums] = useState([]);\n  const [topTracks, setTopTracks] = useState([]);\n  const [select, setSelect] = useState(null);\n  const [albumHover, setAlbumHover] = useState(null);\n\n  useEffect(() => {\n    spotify.getArtist(artistId)\n      .then(res => setArtist(res))\n      .catch(err => console.log(err));\n\n    spotify.getArtistAlbums(artistId)\n      .then(res => setAlbums(res.items))\n      .catch(err => console.log(err));\n\n    spotify.getArtistTopTracks(artistId, \"US\")\n      .then(res => {\n        setTopTracks(res.tracks);\n        // convert playlist.tracks to playlist.tracks.items.track\n        // because that's how we extract each track in the footer player\n        let playlist = res;\n        let items = res.tracks;\n        items = items.map(item => ({'track': item}));\n        playlist.tracks = {};\n        playlist.tracks.items = items;\n\n        dispatch({\n          type: 'SET_PLAYLIST',\n          playlist: playlist\n        });\n\n        dispatch({\n          type: 'SET_INDEX',\n          index: 0\n        });\n      })\n      .catch(err => console.log(err));\n\n  }, [])\n\n  // for visual select purpose only\n  const handleSelect = (id) => {\n    if(select) setSelect(null);\n    else setSelect(id);\n  }\n\n  const playSong = (trackId, index) => {\n    dispatch({\n      type: 'SET_ITEM',\n      item: topTracks[index]\n    });\n\n    dispatch({\n      type: 'SET_INDEX',\n      index: index\n    });\n\n    dispatch({\n      type: 'SET_PLAYING',\n      playing: trackId\n    });\n\n    dispatch({\n      type: 'SET_PAUSE',\n      paused: false\n    })\n  };\n\n  const getAlbumTracks = (albumId, imageURL) => {\n    spotify.getAlbumTracks(albumId)\n      .then(res => {\n        // format the playlist in the way we will extract the data later\n        let items = res.items;\n        items = items.map(item => ({'track': item}));\n        let playlist = { tracks: {} };\n        playlist.tracks.items = items;\n        playlist.images = [{url: imageURL}];\n\n        dispatch({\n          type: 'SET_PLAYLIST',\n          playlist: playlist\n        });\n\n        dispatch({\n          type: 'SET_INDEX',\n          index: 0\n        });\n\n        dispatch({\n          type: 'SET_TAB',\n          tab: null\n        });\n\n      })\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <div className=\"artist\">\n      <div className=\"artist__top\">\n\n        <img src={artist?.images[0].url} alt={artist?.name}/>\n\n        <div className=\"artist__info\">\n          <h1>{artist?.name}</h1>\n          <p>{`Genres: `}<span>{artist?.genres.join(', ')}</span></p>\n          <p>{`Popularity: `}<span>{artist?.popularity}</span></p>\n          <p>{`Followers: `}<span>{artist?.followers.total.toLocaleString()}</span></p>\n          <button>Follow</button>\n        </div>\n      </div>\n\n      <div className=\"artist__topTracks\">\n        <h2>Popular</h2>\n        <div className=\"artist__popular\">\n          {\n            topTracks.map((track, i) => (\n              <SongRow\n                key={i}\n                track={track}\n                num={i+1}\n                play={playSong}\n                playingId={playing}\n                onSelect={() => handleSelect(track.id)}\n                select={select}\n              />\n            ))\n          }\n        </div>\n      </div>\n\n      <div className=\"artist__bottom\">\n        <h2>Albums</h2>\n        <div className=\"artist__albums\">\n          {\n            albums.map((album, i) => (\n              <div className=\"artist__album\"\n                key={i}\n                onClick={() => getAlbumTracks(album.id, album.images[0].url)}\n                onMouseEnter={() => setAlbumHover(album.id)}\n                onMouseLeave={() => setAlbumHover(null)}\n              >\n                { albumHover === album.id && <PlayArrowIcon /> }\n                <img src={album.images[0].url} alt={album.name} style={{ width: '160px', height: '160px'}}/>\n                <p>{album.name}</p>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}